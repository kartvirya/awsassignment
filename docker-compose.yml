version: '3.8'

services:
  # Backend API service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: collegesafe-app
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3001}
      - HOST=${HOST:-0.0.0.0}
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_CA_CERT=${DATABASE_CA_CERT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - SESSION_SECRET=${SESSION_SECRET}
      - SESSION_MAX_AGE=${SESSION_MAX_AGE:-86400000}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - UPLOAD_PATH=${UPLOAD_PATH:-./uploads}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-9090}
    ports:
      - "3001:3001"
    volumes:
      - uploads:/app/uploads
    networks:
      - collegesafe-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - db-migration

  # Database migration service
  db-migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: collegesafe-migration
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_CA_CERT=${DATABASE_CA_CERT}
    command: ["sh", "-c", "npm run db:push && echo 'Migration completed'"]
    networks:
      - collegesafe-network
    restart: "no"

  # Nginx reverse proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: collegesafe-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./dist/public:/usr/share/nginx/html:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - collegesafe-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: collegesafe-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    networks:
      - collegesafe-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  uploads:
    driver: local
  redis-data:
    driver: local

networks:
  collegesafe-network:
    driver: bridge
