Here's a **comprehensive prompt** you can use to guide the development of a **full-stack web application deployed on AWS**, based on the **youth violence intervention** problem described:

---

### 🛠️ **Prompt to Build Full-Stack Cloud Web App on AWS: Youth Empower Hub**

---

### 🧩 Project Overview:

Build a **Youth Empowerment Hub Web Application** that provides **counselling resources, CBT-based self-help tools**, and **access to mentors** to combat youth violence. The app will include multiple user roles (e.g., **student**, **counsellor**, **admin**), and will be fully deployed and monitored on **AWS Cloud**.

---

### 🔧 Tech Stack:

**Frontend:**

* Framework: React.js or Next.js
* Design: Tailwind CSS / Bootstrap
* Auth: AWS Cognito or Firebase (optional)

**Backend:**

* Framework: Node.js with Express OR Python with Flask
* APIs: REST API or GraphQL
* Hosting: AWS EC2 or AWS Lambda (serverless)

**Database:**

* AWS DynamoDB (NoSQL) OR Amazon RDS (SQL, e.g., MySQL/PostgreSQL)

**File Storage:**

* AWS S3 (for document uploads, images, CBT materials)

**Monitoring:**

* AWS CloudWatch
* AWS X-Ray (optional for tracing)
* AWS CloudTrail (for auditing user actions)

---

### 👥 User Roles and Functionalities (Requirement):

Each team member must build one of the following **user roles**, each with at least **two distinct features**:

1. **Student / Youth (Role 1)**

   * Access CBT self-help resources (stored in S3)
   * Book sessions with counsellors (write to database)

2. **Counsellor / Mentor (Role 2)**

   * View booked sessions and youth profiles
   * Upload or assign CBT worksheets/resources

3. **Admin (Role 3)**

   * Manage users (CRUD)
   * Analytics dashboard using AWS CloudWatch metrics (e.g., number of sessions booked per week)

4. **Volunteer / Community Leader (Optional Role 4)**

   * Post events or motivational blog content
   * Approve/reject counselling requests

---

### ☁️ Cloud Architecture on AWS:

**Core Services:**

* 🧠 AWS Cognito – User authentication and identity
* 🗄️ AWS DynamoDB / RDS – Store user info, session logs, CBT data
* 🗂️ AWS S3 – CBT documents, image storage
* 🚀 AWS EC2 / AWS Lambda – Host backend services or REST API
* 🌐 AWS Route 53 – Domain management (optional)
* 📊 AWS CloudWatch – Monitor app performance and API health
* 🔎 AWS CloudTrail – Track user/admin actions
* 🧪 AWS X-Ray – For in-depth tracing (optional, advanced)

---

### 🌐 Example URL Routing:

| Route                   | Description                     |
| ----------------------- | ------------------------------- |
| `/login`                | Auth via Cognito                |
| `/dashboard/student`    | Student home, CBT access        |
| `/dashboard/counsellor` | View bookings, student profiles |
| `/dashboard/admin`      | Manage users, monitor metrics   |
| `/resources/upload`     | Upload files to S3              |
| `/analytics`            | CloudWatch-integrated dashboard |

---

### 📦 Deployment Steps:

1. Set up GitHub repo and CI/CD pipeline with GitHub Actions or AWS CodePipeline.
2. Create and configure EC2 instance or Lambda + API Gateway.
3. Create S3 buckets and permissions policy.
4. Create and seed DynamoDB tables (or RDS DB).
5. Enable and configure AWS CloudWatch and CloudTrail.
6. Deploy frontend via EC2, Amplify, or S3 static hosting.
7. Test performance, availability, and error tracking.

---

### 🧪 Testing and Monitoring:

* ✅ Use Postman or Insomnia for API tests.
* 📊 Log app metrics and user activities via CloudWatch Logs.
* 🔍 Monitor API errors, response time, user interactions.

---

### 📝 Deliverables:

* Working Web App URL (hosted on AWS)
* GitHub repo link
* Architecture diagram (use draw\.io or Lucidchart)
* Group report (include who did what, screenshots, AWS services used)
* CloudWatch dashboard screenshots

---

Would you like me to create:

* Sample architecture diagram?
* Sample project structure (code folder layout)?
* User interface mockup in Figma/HTML?

Let me know how you'd like to proceed!
