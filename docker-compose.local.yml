version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: collegesafe-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: collegesafe
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - collegesafe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d collegesafe"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: collegesafe-app
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3001
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://postgres:password@db:5432/collegesafe
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-2024
      - JWT_EXPIRES_IN=24h
      - SESSION_SECRET=your-session-secret-key-change-this-in-production-2024
      - SESSION_MAX_AGE=86400000
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=info
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - MAX_FILE_SIZE=10485760
      - UPLOAD_PATH=./uploads
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    ports:
      - "3001:3001"
    volumes:
      - uploads:/app/uploads
    networks:
      - collegesafe-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy

  # Database migration service
  db-migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: collegesafe-migration
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/collegesafe
    command: ["sh", "-c", "npm run db:push && echo 'Migration completed'"]
    networks:
      - collegesafe-network
    restart: "no"
    depends_on:
      db:
        condition: service_healthy

  # Redis for session storage
  redis:
    image: redis:7-alpine
    container_name: collegesafe-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - collegesafe-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres-data:
    driver: local
  uploads:
    driver: local
  redis-data:
    driver: local

networks:
  collegesafe-network:
    driver: bridge 